FSM Types:
Moore Machine: Output depends only on the current state.
Mealy Machine: Output depends on the current state and inputs.
Components of FSM:

States: Define all possible states.
Inputs and Outputs: Specify input conditions and expected outputs for each state.
Transitions: Determine how the FSM moves between states based on inputs.


//Overlap Moore
//Design Code
module Overlap_moore(input clk,reset,in,output out);
  //setting up parameters
  parameter s0 = 3'b000;
  parameter s1 = 3'b001;
  parameter s2 = 3'b010;
  parameter s3 = 3'b011;
  parameter s4 = 3'b100;
  parameter s5 = 3'b101;
   
  //defining state and next state
  reg[2:0] state,next_state;
  
  //present state
  always@(posedge clk or posedge reset)
    begin
      if(reset)
        state <= s0;
      else
        state <= next_state;
    end
  
  //next state
  always@*
    begin
      case(state)
        s0 : begin
              if(in)
                next_state = s1;
              else
                next_state = s0;
        end
         s1 : begin
           if(~in)
                next_state = s2;
              else
                next_state = s1;
        end
         s2 : begin
              if(in)
                next_state = s3;
              else
                next_state = s1;
        end
         s3 : begin
           if(~in)
                next_state = s4;
              else
                next_state = s1;
        end
         s4 : begin
              if(in)
                next_state = s5;
              else
                next_state = s0;
        end
         s5 : begin
              if(in)
                next_state = s1;
              else
                next_state = s4;
        end
        default : begin
                   next_state = s0;
        end
      endcase
    end
  
  //output
  assign out = ((state == s5) && (in == 1'b1)) ? 1'b1 : 1'b0;
endmodule

//TestBench
`timescale 1ns / 1ps
module tb_moore();

reg clk;
reg reset;
reg in;
wire out;

  Overlap_moore DUT(clk,reset,in,out);

initial
begin
    clk = 1'b0;
    forever #5 clk = ~clk;
end

initial
begin
    reset = 1'b1;
    #10;
    reset = 1'b0;
    in = 1'b1;
    #10;
    in = 1'b0;
    #10;
    in = 1'b1; 
    #10;
    in = 1'b0;
    #10;
    in = 1'b1;
    #10;
    in = 1'b0; 
    #10;
    in = 1'b1;
    #10;
    in = 1'b1;
    #10;
    in = 1'b1;
    #10;
    in = 1'b1;
    #10;
    in = 1'b1;
    #10;
    in = 1'b1;
    #10;
    in = 1'b1;
    #10;
    in= 1'b1;
    #10;
    $finish;
end 
  
  initial
    begin
      $dumpfile("test.vcd");
      $dumpvars(1);
    end
  
  initial
    begin
      $monitor("in=%b, out=%b",in,out);
    end
  
endmodule

//Non Overlap Moore
//Design Code
`timescale 1ns / 1ps
module non_overlap_110( input clk,reset,in,output wire out);
  
    //Assign values for the states 
    parameter S0 = 2'b00;
    parameter S1 = 2'b01;
    parameter S2 = 2'b10;
    parameter S3 = 2'b11;
  
    //define the size of state and next_state 
    reg [1:0] state,next_state;
  
    //Present state logic sequential 
    always@(posedge clk or posedge reset)
    begin
        if(reset)
            state <= S0;
        else 
            state <= next_state;
    end
  
    //Next state logic Combinational
    always@*
    begin
            case(state)
                S0  :   begin
                        if(in)
                            next_state = S1;
                        else 
                            next_state = S0;
                        end        
                S1  :   begin
                                if(in)
                                    next_state = S2;
                                else 
                                    next_state = S0;
                                end
                S2  :   begin
                            if(in)
                                 next_state = S1;
                            else 
                                 next_state = S3;
                            end            
                S3  :   begin
                            if(in)
                                next_state = S1;
                            else 
                                next_state = S0;
                            end
                default : begin
                                next_state = S0;
                          end                                                                                 
            endcase    
    end
    //Output logic 
    assign out = (state == S3) ?    1'b1   :   1'b0;
                            
endmodule
//TestBench
`timescale 1ns / 1ps
module test_110();

reg clk,reset,in;
wire out;

non_overlap_110 DUT(clk,reset,in,out);

initial
begin
    clk = 1'b0;
    forever #5 clk = ~clk;
end

initial
begin
    reset = 1'b1;#10;
    reset = 1'b0;
    in = 1'b1;#10;
    in = 1'b1;#10;
    in = 1'b0;#10;
    in = 1'b1;#10;
    in = 1'b1;#10;
    in = 1'b0;#10;
    in = 1'b0;#10;
    in = 1'b1;#10;
    in = 1'b1;#10;
    in = 1'b1;#10;
    $finish;
end
  
  initial
    begin
      $dumpfile("test.vcd");
      $dumpvars(1);
    end

initial
begin
    $monitor("in = %b out = %b",in,out);
end
endmodule


//Mealy overlap
//Design Code
`timescale 1ns / 1ps
module Overlap_mealy(input clk,reset,data,output out);
//State assignment 
parameter S0 = 3'b000;
parameter S1 = 3'b001;
parameter S2 = 3'b010;
parameter S3 = 3'b011;
parameter S4 = 3'b100;

//defining the state and next state 
reg [2:0] state , next_state;

//present state Sequential
always@(posedge clk or posedge reset)
begin
    if(reset)
        state <= S0;
    else 
        state <= next_state;   
end    

//next_state Combinational
always@*
begin
    case(state)
        S0  :   begin
                    if(data)
                        next_state = S1;
                    else
                        next_state = S0;    
                end
        S1  :   begin
                     if(~data)
                        next_state = S2;
                     else
                        next_state = S1;    
                 end
        S2  :   begin
                     if(data)
                        next_state = S3;
                     else 
                        next_state = S0;      
                end
       S3   :   begin
                     if(~data)
                        next_state = S4;
                     else
                        next_state = S1;  
                end
       S4   :   begin
                     if(data)
                        next_state = S3;
                     else 
                        next_state = S0;      
                end
      default : begin
                        next_state = S0;
                end                                            
    endcase
end 

//OUTPUT  Combinational mealy output depends on Preset state and input 
assign out = ((state == S4) && (data == 1'b1)) ? 1'b1 : 1'b0;

endmodule
//TestBench
`timescale 1ns / 1ps
module tb_mealy();

reg clk;
reg reset;
reg data;
wire out;

Overlap_mealy DUT(clk,reset,data,out);

initial
begin
    clk = 1'b0;
    forever #5 clk = ~clk;
end

initial
begin
    reset = 1'b1;
    #10;
    reset = 1'b0;
    data = 1'b1;#10;
    data = 1'b0;#10;
    data = 1'b1;#10;
    data = 1'b0;#10;
    data = 1'b1;#10;
    data = 1'b0;#10;
    data = 1'b1;#10;
    data = 1'b1;#10;
    data = 1'b1;#10;
    data = 1'b1;#10;
    data = 1'b1;#10;
    data = 1'b1;#10;
    data = 1'b1;#10;
    data = 1'b1;#10;
    $finish;
end 
  
  initial
    begin
      $dumpfile("test.vcd");
      $dumpvars(1);
    end
  
  initial
    begin
      $monitor("data=%d, out=%d",data,out);
    end
      
endmodule

//Non overlap Mealy
//Design Code
`timescale 1ns / 1ps
module Mealy_110_n0(input clk,reset,in,output wire out);

// Setting up the parameters 
parameter S0 = 2'b00;
parameter S1 = 2'b01;
parameter S2 = 2'b10;

//defining state amd next state 
reg [1:0] state,next_state;

// Present state - Sequential 
always@(posedge clk or posedge reset)
begin
    if(reset)
        state <= S0;
    else 
        state <= next_state;    
end 
//Next state combinational logic 
always@*
begin
    case(state)
        S0      :       begin
                            if(in)
                                next_state = S1;
                            else 
                                next_state = S0;    
                        end 
        S1      :       begin
                            if(in)
                                next_state = S2;
                            else 
                                next_state = S0;    
                        end                     
        S2      :       begin
                            if(in)
                                next_state = S2;
                            else 
                                next_state = S0;
                        end  
        default     :   begin
                                next_state = S0;
                        end                                                 
    endcase
end

    assign out = ((state == S2) && (in == 1'b0)) ?  1'b1    :   1'b0; 
    //                    PS             INPUT          
endmodule
//TestBench
`timescale 1ns / 1ps
module test_110();

reg clk,reset,in;
wire out;

Mealy_110_n0 DUT(clk,reset,in,out);

initial
begin
    clk = 1'b0;
    forever #5 clk = ~clk;
end

initial
begin
    reset = 1'b1;#10;
    reset = 1'b0;
    in = 1'b1;#10;
    in = 1'b1;#10;
    in = 1'b0;#10;
    in = 1'b1;#10;
    in = 1'b1;#10;
    in = 1'b0;#10;
    in = 1'b0;#10;
    in = 1'b1;#10;
    in = 1'b1;#10;
    in = 1'b1;#10;
    $finish;
end
  
  initial
    begin
      $dumpfile("test.vcd");
      $dumpvars(1);
    end

initial
begin
    $monitor("in = %b out = %b",in,out);
end
endmodule
                
                
            
          
